
## lvbase library
## ------------------------------------------------------------------------

add_library(lvbase STATIC  
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/applicationcontext.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/bytebuffer.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/commandlineparser.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/datetime.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/directory.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/exception.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/fileio.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/library.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/libraryloadpath.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/mlnode.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/mlnodetojson.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/module.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/package.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/packagegraph.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/palettecontainer.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/path.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/program.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/stacktrace.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/typename.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/utf8.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/version.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/visuallog.cpp"
)

if (WIN32)
    target_sources(lvbase
        PRIVATE 
            "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/stacktrace_win.cpp"
            "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/library_win.cpp"
            "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/libraryloadpath_win.cpp"
            "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/applicationcontext_win.cpp"
    )
endif ()

if(UNIX AND NOT APPLE)
    target_sources(lvbase
        PRIVATE
            "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/stacktrace_unix.cpp"
            "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/library_unix.cpp"
            "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/libraryloadpath_unix.cpp"
            "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/applicationcontext_unix.cpp"
    )
endif()

if(APPLE)
    target_sources(lvbase
        PRIVATE
            "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/stacktrace_unix.cpp"
            "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/libraryloadpath_unix.cpp"
            "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src/applicationcontext_mac.cpp"
    )
endif()

target_include_directories(lvbase
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/src"
    PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/include"
)
target_compile_definitions(lvbase PRIVATE LV_BASE_LIB LV_BASE_STATIC)
target_compile_features(lvbase PRIVATE cxx_std_17)



# Include 3rdparty library - date

target_include_directories(lvbase
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/3rdparty/date/include"
)

# Include 3rdparty library - libb64

target_include_directories(lvbase
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/3rdparty/libb64/include"
)
target_sources(lvbase
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/3rdparty/libb64/src/cdecode.c"
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/3rdparty/libb64/src/cencode.c"
)

# Include 3rdparty library - backward

if(UNIX)
    target_include_directories(lvbase
        PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/3rdparty/backward"
    )
endif()

# Include 3rdparty library - rapidjson

target_include_directories(lvbase
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/3rdparty/rapidjson/include"
)

# Include 3rdparty library - utf8proc

target_compile_definitions(lvbase PRIVATE UTF8PROC_EXPORTS)
target_include_directories(lvbase
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/3rdparty/utf8proc"
)
target_sources(lvbase
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvbase/3rdparty/utf8proc/utf8proc.c"
)

# Link experimental filesystem on older compilers

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.4)
        message(FATAL_ERROR "GCC version must be newer than 5.4.")
    elseif (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 8.0)
        message(WARNING "Older Verison of GCC detected (<8.0). Using Legacy C++ support")
        target_link_libraries(lvbase -lstdc++fs)
    endif()
endif()

## lvelements/compiler library
## ------------------------------------------------------------------------

add_library(lvelements STATIC 
    "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/src/compiler/compiler.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/src/compiler/elementsmodule.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/src/compiler/elementssections.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/src/compiler/languagenodes.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/src/compiler/languageparser.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/src/compiler/modulefile.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/src/compiler/sourcerange.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/src/compiler/propertybindingcontainer.cpp"
)
target_include_directories(lvelements
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/src"
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/src/compiler"
    PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/include"
)
target_compile_definitions(lvelements PRIVATE LV_ELEMENTS_LIB LV_BASE_STATIC LV_ELEMENTS_STATIC)

# Link lvbase

target_link_libraries(lvelements PRIVATE lvbase)

# Include 3rdparty library - treesitter

target_sources(lvelements
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/3rdparty/treesitter/lib/src/lib.c"
)
target_include_directories(lvelements
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/3rdparty/treesitter/lib/src"
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/3rdparty/treesitter/lib/include"
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/3rdparty/treesitter/utf8proc"
)

# Include library - tree-sitter-elements

target_sources(lvelements
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/3rdparty/treesitterelements/elementsparserinternal.c"
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/3rdparty/treesitterelements/scanner.c"
)

target_include_directories(lvelements
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lvelements/3rdparty/treesitterelements"
)


# Set position independent code for static libraries

if(UNIX AND NOT APPLE)
    set_property(TARGET lvbase PROPERTY POSITION_INDEPENDENT_CODE ON)
    set_property(TARGET lvelements PROPERTY POSITION_INDEPENDENT_CODE ON)
endif()

